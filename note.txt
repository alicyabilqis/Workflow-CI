main.yml
name: CI/CD MLflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CSV_URL: "https://drive.google.com/uc?id=1HHv8WwNGGksU2IwY2vIJlsD8xr5tBsiV&confirm=t&uuid=466a1242-8326-43e0-ad6b-fc9b7603a5b3"
  TARGET_VAR: "Cover_Type"

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: üîç Check Environment Variables
        run: |
          echo "CSV_URL: $CSV_URL"

      - name: üß¨ Set up Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: MLProject/conda.yaml
          activate-environment: Forest_Cover_Classification
          auto-activate-base: false

      - name: üîÅ Initialize Conda
        run: |
          echo "Initializing Conda for bash"
          conda init bash
          source ~/.bashrc

      - name: üì¶ Install MLflow and Dependencies
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          pip install mlflow
          pip install -r MLProject/requirements.txt || echo "Skipping if no requirements.txt"

      #- name: üßº Clean and create mlruns directory
      #  run: |
      #    if [ -f MLProject/mlruns ]; then
      #      echo "‚ö†Ô∏è 'mlruns' is a file. Removing it..."
      #      rm MLProject/mlruns
      #    fi
      #      mkdir -p MLProject/mlruns

      - name: üöÄ Run MLflow Project
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          cd MLProject
          export MLFLOW_TRACKING_URI=./mlruns
          mlflow run . -P data_path=$CSV_URL --env-manager=local

      # üÜï Tambahkan di sini
      - name: üîç Lihat isi folder mlruns
        run: |
          echo "LIST isi mlruns:"
          ls -R ls -R MLProject/mlruns || echo "mlruns folder nggak ada"

          echo "LIST isi artifacts terakhir:"
          RUN_ID=$(ls -td MLProject/mlruns/0/*/ | head -n 1 | cut -d'/' -f4)
          echo "Latest RUN_ID: $RUN_ID"
          ls -R MLProject/mlruns/0/$RUN_ID/artifacts || echo "artifacts nggak ada"


      - name: üè∑Ô∏è Get latest MLflow run_id
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          echo "Checking contents of MLProject/mlruns/0/"
          ls -l MLProject/mlruns/0/
          RUN_ID=$(ls -td MLProject/mlruns/0/*/ | head -n 1 | cut -d'/' -f4)
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "Latest run_id: $RUN_ID"

      - name: ‚úÖ Verify model directory exists
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          echo "Verifying model directory for RUN_ID: $RUN_ID"
          #if [ ! -d "MLProject/mlruns/0/$RUN_ID/artifacts/model" ]; then
          if [ ! -d "MLProject/mlruns/0/models" ]; then
            echo "‚ùå Model directory not found. Exiting."
            exit 1
          fi

      - name: üì§ Push mlruns to GitHub
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
          git add .
          git commit -m "Save mlruns from Forest Cover CI run" || echo "No changes to commit"
          git push origin main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: üê≥ Build Docker Image from MLflow Model
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          #mlflow models build-docker --model-uri "file://$GITHUB_WORKSPACE/MLProject/mlruns/0/$RUN_ID/artifacts/model" --name forest-cover-model
          MODEL_ID=$(ls -1 MLProject/mlruns/0/models | head -n 1)
          mlflow models build-docker --model-uri "file://$GITHUB_WORKSPACE/MLProject/mlruns/0/models/$MODEL_ID/artifacts" --name forest-cover-model


      - name: üîê Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: üè∑Ô∏è Tag Docker Image
        run: |
          docker tag forest-cover-model ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest

      - name: üì¶ Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest





MLProject
name: Forest_Cover_Classification

conda_env: conda.yaml

entry_points:
  main:
    parameters:
      data_path: {type: str, default: "https://drive.google.com/uc?export=download&id=1u4eL5GYTfv5AWZ0PUWNP2N9EEpn6n-NS"}
    command: "python modelling_tuning.py --data_path {data_path}"




conda.yaml
channels:
- conda-forge
dependencies:
- python=3.11.13
- pip<=24.1.2
- pip:
  - mlflow==3.1.1
  - cloudpickle==3.1.1
  - numpy==2.0.2
  - pandas==2.2.2
  - pathlib==1.0.1
  - psutil==5.9.5
  - scikit-learn==1.6.1
  - scipy==1.15.3
name: Forest_Cover_Classification




modelling_tuning.py

import pandas as pd
import mlflow
import mlflow.sklearn
import argparse
import os
import urllib.request
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.metrics import accuracy_score, recall_score, precision_score, confusion_matrix

def download_if_needed(data_path: str, local_filename: str = "dataset.csv") -> str:
    if os.path.exists(data_path):
        print(f"‚úÖ Local file found: {data_path}")
        return data_path
    elif data_path.startswith("http"):
        print(f"‚¨áÔ∏è Downloading dataset from {data_path} ...")
        urllib.request.urlretrieve(data_path, local_filename)
        print(f"‚úÖ Downloaded to: {local_filename}")
        return local_filename
    else:
        raise FileNotFoundError(f"‚ùå Data path {data_path} is not valid and doesn't exist.")

def main(data_path):
    #mlflow.set_tracking_uri("file:MLProject/mlruns")
    #mlflow.set_tracking_uri("file:./mlruns")
    # JANGAN pakai set_experiment() kalau dijalankan via `mlflow run .`

    local_data_path = download_if_needed(data_path)
    df = pd.read_csv(local_data_path)

    X = df.drop("Cover_Type", axis=1)
    y = df["Cover_Type"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    est = RandomForestClassifier(random_state=42)
    params = {
        "n_estimators": [40, 50, 60],
        "max_depth": [12, 14, 16], 
    }

    search = RandomizedSearchCV(
        estimator=est,
        param_distributions=params,
        n_iter=9,
        cv=3,
        n_jobs=-1,
        random_state=42,
        verbose=1
    )
    search.fit(X_train, y_train)

    best_model = search.best_estimator_
    best_params = search.best_params_

    y_pred = best_model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred, average='macro')
    precision = precision_score(y_test, y_pred, average='macro')
    conf_matrix = confusion_matrix(y_test, y_pred)
    tn, fp, fn, tp = (0, 0, 0, 0) if conf_matrix.shape != (2, 2) else conf_matrix.ravel()

    # ‚úÖ TANPA run_name & TANPA nested=True
    with mlflow.start_run():
        mlflow.log_params(best_params)
        mlflow.log_metric("accuracy", acc)
        mlflow.log_metric("recall", recall)
        mlflow.log_metric("precision", precision)
        if conf_matrix.shape == (2, 2):
            mlflow.log_metric("true_negative", tn)
            mlflow.log_metric("false_positive", fp)
            mlflow.log_metric("false_negative", fn)
            mlflow.log_metric("true_positive", tp)
        mlflow.sklearn.log_model(best_model, "model", input_example=X_test.iloc[:5])
            
        #mlflow.sklearn.log_model(
         #   sk_model=best_model,
         #   artifact_path="model",
         #   input_example=X_test.iloc[:5]
        #)

    print("Best Parameters:", best_params)
    print(f"Accuracy: {acc}")
    print(f"Recall: {recall}")
    print(f"Precision: {precision}")
    print("Confusion Matrix:\n", conf_matrix)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--data_path", type=str, required=True)
    args = parser.parse_args()
    main(args.data_path)

print("Current MLflow tracking URI:", mlflow.get_tracking_uri())
