name: CI/CD MLflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CSV_URL: "MLProject/Forest cover_preprocessing_dataset.csv"
  TARGET_VAR: "Cover_Type"

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3

      - name: üêç Setup Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: üß™ Check Env Vars
        run: echo "$CSV_URL"

      - name: üß¨ Setup Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: MLProject/conda.yaml
          activate-environment: Forest_Cover_Classification
          auto-activate-base: false

      - name: üîß Initialize Conda
        run: |
          conda init bash
          source ~/.bashrc

      - name: üì¶ Install MLflow & Dependencies
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          pip install mlflow
          [ -f MLProject/requirements.txt ] && pip install -r MLProject/requirements.txt || echo "No extra requirements"

      - name: üßπ Clean mlruns and re-init experiment
        run: |
          rm -rf MLProject/mlruns
          mlflow experiments create --experiment-name "Forest Cover Classification" || true

      - name: üöÄ Run MLflow Project
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          cd MLProject
          mlflow run . --env-manager=local --experiment-name "Forest Cover Classification"

      - name: üîç Get Experiment ID
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          EXPERIMENT_ID=$(mlflow experiments search | grep "Forest Cover Classification" | awk '{print $1}')
          echo "EXPERIMENT_ID=$EXPERIMENT_ID"
          echo "EXPERIMENT_ID=$EXPERIMENT_ID" >> $GITHUB_ENV
        shell: bash

      - name: üîç Get latest MLflow run_id
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          python -c "from mlflow.tracking import MlflowClient; \
          exp = MlflowClient().get_experiment_by_name('Forest_Cover_Classification'); \
          print(f'EXPERIMENT_ID={exp.experiment_id}' if exp else 'Experiment not found')" >> $GITHUB_ENV


      - name: ‚úÖ Verify model directory exists
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          if [ ! -d "MLProject/mlruns/$EXPERIMENT_ID/$RUN_ID/artifacts/best_model_tuned" ]; then
            echo "‚ùå Model not found at expected path. Exiting."
            exit 1
          fi
          echo "‚úÖ Model verified."

      - name: üì§ Push mlruns to repository
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
          git add MLProject/mlruns || true
          git commit -m "Add mlruns from CI run" || echo "No changes to commit"
          git push origin main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: üê≥ Build Docker image from MLflow model
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          mlflow models build-docker \
            --model-uri "file://$GITHUB_WORKSPACE/MLProject/mlruns/$EXPERIMENT_ID/$RUN_ID/artifacts/best_model_tuned" \
            --name cc

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: üè∑Ô∏è Tag Docker Image
        run: |
          docker tag cc ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest

      - name: üì¶ Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest
