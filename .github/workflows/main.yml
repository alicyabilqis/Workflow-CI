name: CI/CD MLflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CSV_URL: "MLProject/Forest cover_preprocessing_dataset.csv"
  TARGET_VAR: "Cover_Type"

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v3

      - name: 🐍 Setup Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: 📥 Setup Conda environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: MLProject/conda.yaml
          activate-environment: Forest_Cover_Classification
          auto-activate-base: false

      - name: 🧠 Install dependencies
        run: |
          conda init bash
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          pip install -r MLProject/requirements.txt || true
          pip install mlflow

      - name: 🚀 Run MLflow Project
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          mlflow run MLProject --env-manager=local

      - name: 🔍 Get MLflow RUN_ID
        id: get_run_id
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          cd MLProject
          echo "🔎 Looking for run_name: Hyperparameter_Tuning"
          RUN_ID=$(grep -l "run_name: Hyperparameter_Tuning" mlruns/0/*/meta.yaml | head -n 1 | cut -d'/' -f3)
          echo "✅ Found RUN_ID=$RUN_ID"
          echo "::set-output name=run_id::$RUN_ID"

      - name: 📂 Show logged artifacts
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          cd MLProject
          echo "📁 Artifacts in latest run:"
          ls -R mlruns/0/${{ steps.get_run_id.outputs.run_id }}/artifacts/

      - name: ✅ Verify model artifacts exist
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          cd MLProject
          ARTIFACT_DIR="mlruns/0/${{ steps.get_run_id.outputs.run_id }}/artifacts"
          if [ ! -d "$ARTIFACT_DIR/best_model_tuned" ]; then
            echo "❌ best_model_tuned not found in $ARTIFACT_DIR"
            exit 1
          fi
          echo "✅ Model artifacts verified."

      - name: 📤 Commit mlruns to repository
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
          git add MLProject/mlruns || true
          git commit -m "Add mlruns from CI run" || echo "No changes to commit"
          git push origin main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: 🐳 Build Docker image from MLflow model
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          cd MLProject
          mlflow models build-docker \
            --model-uri "file://mlruns/0/${{ steps.get_run_id.outputs.run_id }}/artifacts/best_model_tuned" \
            --name cc

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: 🏷️ Tag Docker Image
        run: |
          docker tag cc ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest

      - name: 📦 Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest
