name: CI/CD MLflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CSV_URL: "https://drive.google.com/uc?id=1HHv8WwNGGksU2IwY2vIJlsD8xr5tBsiV"
  TARGET_VAR: "Cover_Type"

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: üîç Check Environment Variables
        run: |
          echo "CSV_URL: $CSV_URL"

      - name: üß¨ Set up Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: MLProject/conda.yaml
          activate-environment: Forest_Cover_Classification
          auto-activate-base: false

      - name: üîÅ Initialize Conda
        run: |
          echo "Initializing Conda for bash"
          conda init bash
          source ~/.bashrc

      - name: üì¶ Install MLflow and Dependencies
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          pip install mlflow
          pip install -r MLProject/requirements.txt || echo "Skipping if no requirements.txt"

      #- name: üßº Clean and create mlruns directory
      #  run: |
      #    if [ -f MLProject/mlruns ]; then
      #      echo "‚ö†Ô∏è 'mlruns' is a file. Removing it..."
      #      rm MLProject/mlruns
      #    fi
      #      mkdir -p MLProject/mlruns

      - name: üöÄ Run MLflow Project
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          cd MLProject
          export MLFLOW_TRACKING_URI=./mlruns
          mlflow run . -P data_path=$CSV_URL --env-manager=local

      # üÜï Tambahkan di sini
      - name: üîç Lihat isi folder mlruns
        run: |
          echo "LIST isi mlruns:"
          ls -R ls -R MLProject/mlruns || echo "mlruns folder nggak ada"

          echo "LIST isi artifacts terakhir:"
          RUN_ID=$(ls -td MLProject/mlruns/0/*/ | head -n 1 | cut -d'/' -f4)
          echo "Latest RUN_ID: $RUN_ID"
          ls -R MLProject/mlruns/0/$RUN_ID/artifacts || echo "artifacts nggak ada"


      - name: üè∑Ô∏è Get latest MLflow run_id
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          echo "Checking contents of MLProject/mlruns/0/"
          ls -l MLProject/mlruns/0/
          RUN_ID=$(ls -td MLProject/mlruns/0/*/ | head -n 1 | cut -d'/' -f4)
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "Latest run_id: $RUN_ID"

      - name: ‚úÖ Verify model directory exists
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          echo "Verifying model directory for RUN_ID: $RUN_ID"
          #if [ ! -d "MLProject/mlruns/0/$RUN_ID/artifacts/model" ]; then
          if [ ! -d "MLProject/mlruns/0/models" ]; then
            echo "‚ùå Model directory not found. Exiting."
            exit 1
          fi

      - name: üì§ Push mlruns to GitHub
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
          git add .
          git commit -m "Save mlruns from Forest Cover CI run" || echo "No changes to commit"
          git push origin main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: üê≥ Build Docker Image from MLflow Model
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          #mlflow models build-docker --model-uri "file://$GITHUB_WORKSPACE/MLProject/mlruns/0/$RUN_ID/artifacts/model" --name forest-cover-model
          MODEL_ID=$(ls -1 MLProject/mlruns/0/models | head -n 1)
          mlflow models build-docker --model-uri "file://$GITHUB_WORKSPACE/MLProject/mlruns/0/models/$MODEL_ID/artifacts" --name forest-cover-model


      - name: üîê Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: üè∑Ô∏è Tag Docker Image
        run: |
          docker tag forest-cover-model ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest

      - name: üì¶ Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest
