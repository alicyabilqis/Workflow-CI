name: CI/CD MLflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
 workflow_dispatch:
 
env:
  CSV_URL: "MLProject/Forest cover_preprocessing_dataset.csv"
  TARGET_VAR: "Cover_Type"


jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3

      # Setup Python 3.12.7
      - name: Set up Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"
      
      # Check Env Variables
      - name: Check Env
        run: |
          echo $CSV_URL
          
      # Install Conda and create environment from conda.yaml
      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: MLProject/conda.yaml
          activate-environment: Forest_Cover_Classification
          auto-activate-base: false
          
       # Initialize Conda for bash shell
      - name: Initialize Conda
        run: |
          echo "Initializing Conda for bash"
          conda init bash
          source ~/.bashrc  # Apply the changes made by 'conda init'

      # Install MLflow and dependencies
      - name: Install MLflow and dependencies
        run: |
          source ~/.bashrc  # Ensure shell configuration is reloaded
          conda activate Forest_Cover_Classification  # Ensure environment is activated
          pip install mlflow  # Install mlflow if it wasn't installed in the environment
          pip install -r MLProject/requirements.txt  # Optional, if there is a requirements.txt

      # Run MLflow Project
      - name: Run MLflow Project
        run: |
          source ~/.bashrc  # Ensure shell configuration is reloaded
          conda activate Forest_Cover_Classification  # Ensure environment is activated
          cd MLProject
          mlflow run . --env-manager=local #modelling_tuning.py akan otomatis mengunduh jika file tidak ditemukan

      # Get latest run_id
      - name: Get latest MLflow run_id
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          # Cek jika direktori mlruns/0 ada dan menampilkan kontennya
          echo "Checking contents of MLProject/mlruns/0/"
          ls -l MLProject/mlruns/0/
          RUN_ID=$(ls -td MLProject/mlruns/0/*/ | head -n 1 | cut -d'/' -f4)
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "Latest run_id: $RUN_ID"
      # Verify the existence of the model directory for RUN_ID
      - name: Verify model directory exists for RUN_ID
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          echo "Verifying the model directory for RUN_ID: $RUN_ID"
          if [ ! -d "MLProject/mlruns/0/$RUN_ID/artifacts/best_model_tuned" ]; then
            echo "Model not found for RUN_ID: $RUN_ID. Exiting."
            exit 1
          fi
      # ✅ Tambahkan langkah ini untuk menyimpan mlruns/ ke GitHub
      - name: Push changes to repository
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
          git add .
          git commit -m "Save mlruns from CI run" || echo "No changes to commit"
          git push origin main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

        # ✅ Build Docker Image from model
      - name: Build Docker Image from MLflow model
        run: |
          source ~/.bashrc
          conda activate Forest_Cover_Classification
          mlflow models build-docker --model-uri "file://$GITHUB_WORKSPACE/MLProject/mlruns/0/$RUN_ID/artifacts/best_model_tuned" --name cc

      # ✅ Login ke Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # ✅ Tag Docker Image
      - name: Tag Docker Image
        run: |
          docker tag cc ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest

      # ✅ Push Docker Image
      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest
