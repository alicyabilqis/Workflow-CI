name: CI/CD MLflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CSV_URL: "MLProject/Forest cover_preprocessing_dataset.csv"
  TARGET_VAR: "Cover_Type"

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v3

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: üì• Setup Conda environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: MLProject/conda.yaml
          activate-environment: Forest_Cover_Classification
          auto-activate-base: false

      - name: üîß Init conda & install MLflow
        shell: bash -l {0}
        run: |
          conda activate Forest_Cover_Classification
          pip install mlflow

      - name: üöÄ Run MLflow Project
        shell: bash -l {0}
        run: |
          conda activate Forest_Cover_Classification
          export MLFLOW_TRACKING_URI=./MLProject/mlruns
          mlflow run MLProject --env-manager=local

      - name: üîç Get latest MLflow RUN_ID
        id: get_run_id
        shell: bash -l {0}
        run: |
          conda activate Forest_Cover_Classification
          cd MLProject
          echo "üìÅ Checking mlruns/0/"
          ls -al mlruns/0 || echo "‚ö†Ô∏è No runs found"

          RUN_ID=$(ls -td mlruns/0/*/ 2>/dev/null | head -n 1 | awk -F'/' '{print $3}')
          if [ -z "$RUN_ID" ]; then
            echo "‚ùå No RUN_ID found. MLflow logging failed."
            exit 1
          fi
          echo "‚úÖ Found RUN_ID=$RUN_ID"
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      - name: üìÇ Show logged artifacts
        shell: bash -l {0}
        run: |
          conda activate Forest_Cover_Classification
          cd MLProject
          RUN_ID=${{ steps.get_run_id.outputs.run_id }}
          echo "üìÅ Artifacts for run_id: $RUN_ID"
          ls -R mlruns/0/$RUN_ID/artifacts/

      - name: ‚úÖ Verify model artifact exists
        shell: bash -l {0}
        run: |
          cd MLProject
          RUN_ID=${{ steps.get_run_id.outputs.run_id }}
          ARTIFACT="mlruns/0/$RUN_ID/artifacts/best_model_tuned"
          if [ ! -d "$ARTIFACT" ]; then
            echo "‚ùå best_model_tuned not found."
            exit 1
          fi
          echo "‚úÖ Model artifact verified."

      - name: üì§ Commit mlruns to repository
        shell: bash -l {0}
        run: |
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
          git add MLProject/mlruns || true
          git commit -m "Add mlruns from CI run" || echo "No changes to commit"
          git push origin main
        env:
          GH_PAT: ${{ secrets.GH_PAT }}

      - name: üê≥ Build Docker image from MLflow model
        shell: bash -l {0}
        run: |
          cd MLProject
          RUN_ID=${{ steps.get_run_id.outputs.run_id }}
          mlflow models build-docker \
            --model-uri "file://mlruns/0/$RUN_ID/artifacts/best_model_tuned" \
            --name cc

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: üè∑Ô∏è Tag Docker image
        run: |
          docker tag cc ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest

      - name: üì¶ Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.DOCKER_HUB_REPO }}:latest
